#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FLine
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FLF")]
	public partial class FLDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertWOD(WOD instance);
    partial void UpdateWOD(WOD instance);
    partial void DeleteWOD(WOD instance);
    partial void InsertAdministrator(Administrator instance);
    partial void UpdateAdministrator(Administrator instance);
    partial void DeleteAdministrator(Administrator instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertClassTime(ClassTime instance);
    partial void UpdateClassTime(ClassTime instance);
    partial void DeleteClassTime(ClassTime instance);
    partial void InsertCoach(Coach instance);
    partial void UpdateCoach(Coach instance);
    partial void DeleteCoach(Coach instance);
    partial void InsertCrossfit(Crossfit instance);
    partial void UpdateCrossfit(Crossfit instance);
    partial void DeleteCrossfit(Crossfit instance);
    partial void InsertFeaturedContent(FeaturedContent instance);
    partial void UpdateFeaturedContent(FeaturedContent instance);
    partial void DeleteFeaturedContent(FeaturedContent instance);
    partial void InsertFeaturedContentData(FeaturedContentData instance);
    partial void UpdateFeaturedContentData(FeaturedContentData instance);
    partial void DeleteFeaturedContentData(FeaturedContentData instance);
    partial void InsertFighter(Fighter instance);
    partial void UpdateFighter(Fighter instance);
    partial void DeleteFighter(Fighter instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertTrainer(Trainer instance);
    partial void UpdateTrainer(Trainer instance);
    partial void DeleteTrainer(Trainer instance);
    #endregion
		
		public FLDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FLFConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FLDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FLDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FLDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FLDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<WOD> WODs
		{
			get
			{
				return this.GetTable<WOD>();
			}
		}
		
		public System.Data.Linq.Table<Administrator> Administrators
		{
			get
			{
				return this.GetTable<Administrator>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<ClassTime> ClassTimes
		{
			get
			{
				return this.GetTable<ClassTime>();
			}
		}
		
		public System.Data.Linq.Table<Coach> Coaches
		{
			get
			{
				return this.GetTable<Coach>();
			}
		}
		
		public System.Data.Linq.Table<Crossfit> Crossfits
		{
			get
			{
				return this.GetTable<Crossfit>();
			}
		}
		
		public System.Data.Linq.Table<FeaturedContent> FeaturedContents
		{
			get
			{
				return this.GetTable<FeaturedContent>();
			}
		}
		
		public System.Data.Linq.Table<FeaturedContentData> FeaturedContentDatas
		{
			get
			{
				return this.GetTable<FeaturedContentData>();
			}
		}
		
		public System.Data.Linq.Table<Fighter> Fighters
		{
			get
			{
				return this.GetTable<Fighter>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<Trainer> Trainers
		{
			get
			{
				return this.GetTable<Trainer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private string _Email;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _CanLogIn;
		
		private EntitySet<Administrator> _Administrators;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<Coach> _Coaches;
		
		private EntitySet<Fighter> _Fighters;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<Trainer> _Trainers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCanLogInChanging(bool value);
    partial void OnCanLogInChanged();
    #endregion
		
		public Account()
		{
			this._Administrators = new EntitySet<Administrator>(new Action<Administrator>(this.attach_Administrators), new Action<Administrator>(this.detach_Administrators));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._Coaches = new EntitySet<Coach>(new Action<Coach>(this.attach_Coaches), new Action<Coach>(this.detach_Coaches));
			this._Fighters = new EntitySet<Fighter>(new Action<Fighter>(this.attach_Fighters), new Action<Fighter>(this.detach_Fighters));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Trainers = new EntitySet<Trainer>(new Action<Trainer>(this.attach_Trainers), new Action<Trainer>(this.detach_Trainers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanLogIn", DbType="Bit NOT NULL")]
		public bool CanLogIn
		{
			get
			{
				return this._CanLogIn;
			}
			set
			{
				if ((this._CanLogIn != value))
				{
					this.OnCanLogInChanging(value);
					this.SendPropertyChanging();
					this._CanLogIn = value;
					this.SendPropertyChanged("CanLogIn");
					this.OnCanLogInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Administrator", Storage="_Administrators", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Administrator> Administrators
		{
			get
			{
				return this._Administrators;
			}
			set
			{
				this._Administrators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Class", Storage="_Classes", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Coach", Storage="_Coaches", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Coach> Coaches
		{
			get
			{
				return this._Coaches;
			}
			set
			{
				this._Coaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Fighter", Storage="_Fighters", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Fighter> Fighters
		{
			get
			{
				return this._Fighters;
			}
			set
			{
				this._Fighters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Photo", Storage="_Photos", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Trainer", Storage="_Trainers", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Trainer> Trainers
		{
			get
			{
				return this._Trainers;
			}
			set
			{
				this._Trainers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Administrators(Administrator entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Administrators(Administrator entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Coaches(Coach entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Coaches(Coach entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Fighters(Fighter entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Fighters(Fighter entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WOD")]
	public partial class WOD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WODId;
		
		private string _Text;
		
		private int _CrossfitId;
		
		private EntityRef<Crossfit> _Crossfit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWODIdChanging(int value);
    partial void OnWODIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCrossfitIdChanging(int value);
    partial void OnCrossfitIdChanged();
    #endregion
		
		public WOD()
		{
			this._Crossfit = default(EntityRef<Crossfit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WODId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WODId
		{
			get
			{
				return this._WODId;
			}
			set
			{
				if ((this._WODId != value))
				{
					this.OnWODIdChanging(value);
					this.SendPropertyChanging();
					this._WODId = value;
					this.SendPropertyChanged("WODId");
					this.OnWODIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrossfitId", DbType="Int NOT NULL")]
		public int CrossfitId
		{
			get
			{
				return this._CrossfitId;
			}
			set
			{
				if ((this._CrossfitId != value))
				{
					if (this._Crossfit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrossfitIdChanging(value);
					this.SendPropertyChanging();
					this._CrossfitId = value;
					this.SendPropertyChanged("CrossfitId");
					this.OnCrossfitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crossfit_WOD", Storage="_Crossfit", ThisKey="CrossfitId", OtherKey="CrossfitId", IsForeignKey=true)]
		public Crossfit Crossfit
		{
			get
			{
				return this._Crossfit.Entity;
			}
			set
			{
				Crossfit previousValue = this._Crossfit.Entity;
				if (((previousValue != value) 
							|| (this._Crossfit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crossfit.Entity = null;
						previousValue.WODs.Remove(this);
					}
					this._Crossfit.Entity = value;
					if ((value != null))
					{
						value.WODs.Add(this);
						this._CrossfitId = value.CrossfitId;
					}
					else
					{
						this._CrossfitId = default(int);
					}
					this.SendPropertyChanged("Crossfit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrator")]
	public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdministratorId;
		
		private int _AccountId;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdministratorIdChanging(int value);
    partial void OnAdministratorIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Administrator()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdministratorId
		{
			get
			{
				return this._AdministratorId;
			}
			set
			{
				if ((this._AdministratorId != value))
				{
					this.OnAdministratorIdChanging(value);
					this.SendPropertyChanging();
					this._AdministratorId = value;
					this.SendPropertyChanged("AdministratorId");
					this.OnAdministratorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Administrator", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Administrators.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Administrators.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private int _AccountId;
		
		private string _Name;
		
		private string _Description;
		
		private int _PhotoId;
		
		private EntitySet<ClassTime> _ClassTimes;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    #endregion
		
		public Class()
		{
			this._ClassTimes = new EntitySet<ClassTime>(new Action<ClassTime>(this.attach_ClassTimes), new Action<ClassTime>(this.detach_ClassTimes));
			this._Account = default(EntityRef<Account>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassTime", Storage="_ClassTimes", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<ClassTime> ClassTimes
		{
			get
			{
				return this._ClassTimes;
			}
			set
			{
				this._ClassTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Class", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Class", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassTimes(ClassTime entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_ClassTimes(ClassTime entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassTime")]
	public partial class ClassTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassTimeId;
		
		private int _ClassId;
		
		private int _Day;
		
		private string _StartTime;
		
		private string _EndTime;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassTimeIdChanging(int value);
    partial void OnClassTimeIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnDayChanging(int value);
    partial void OnDayChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    #endregion
		
		public ClassTime()
		{
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassTimeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassTimeId
		{
			get
			{
				return this._ClassTimeId;
			}
			set
			{
				if ((this._ClassTimeId != value))
				{
					this.OnClassTimeIdChanging(value);
					this.SendPropertyChanging();
					this._ClassTimeId = value;
					this.SendPropertyChanged("ClassTimeId");
					this.OnClassTimeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Int NOT NULL")]
		public int Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassTime", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.ClassTimes.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.ClassTimes.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coach")]
	public partial class Coach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoachId;
		
		private int _AccountId;
		
		private int _PhotoId;
		
		private string _Background;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoachIdChanging(int value);
    partial void OnCoachIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnBackgroundChanging(string value);
    partial void OnBackgroundChanged();
    #endregion
		
		public Coach()
		{
			this._Account = default(EntityRef<Account>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CoachId
		{
			get
			{
				return this._CoachId;
			}
			set
			{
				if ((this._CoachId != value))
				{
					this.OnCoachIdChanging(value);
					this.SendPropertyChanging();
					this._CoachId = value;
					this.SendPropertyChanged("CoachId");
					this.OnCoachIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Background", DbType="NChar(2000) NOT NULL", CanBeNull=false)]
		public string Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Coach", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Coaches.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Coaches.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Coach", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Coaches.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Coaches.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Crossfit")]
	public partial class Crossfit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CrossfitId;
		
		private string _Description;
		
		private int _PhotoId;
		
		private string _Caption;
		
		private string _WODDescription;
		
		private string _Title;
		
		private EntitySet<WOD> _WODs;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrossfitIdChanging(int value);
    partial void OnCrossfitIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnWODDescriptionChanging(string value);
    partial void OnWODDescriptionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Crossfit()
		{
			this._WODs = new EntitySet<WOD>(new Action<WOD>(this.attach_WODs), new Action<WOD>(this.detach_WODs));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrossfitId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CrossfitId
		{
			get
			{
				return this._CrossfitId;
			}
			set
			{
				if ((this._CrossfitId != value))
				{
					this.OnCrossfitIdChanging(value);
					this.SendPropertyChanging();
					this._CrossfitId = value;
					this.SendPropertyChanged("CrossfitId");
					this.OnCrossfitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WODDescription", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string WODDescription
		{
			get
			{
				return this._WODDescription;
			}
			set
			{
				if ((this._WODDescription != value))
				{
					this.OnWODDescriptionChanging(value);
					this.SendPropertyChanging();
					this._WODDescription = value;
					this.SendPropertyChanged("WODDescription");
					this.OnWODDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crossfit_WOD", Storage="_WODs", ThisKey="CrossfitId", OtherKey="CrossfitId")]
		public EntitySet<WOD> WODs
		{
			get
			{
				return this._WODs;
			}
			set
			{
				this._WODs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Crossfit", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Crossfits.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Crossfits.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WODs(WOD entity)
		{
			this.SendPropertyChanging();
			entity.Crossfit = this;
		}
		
		private void detach_WODs(WOD entity)
		{
			this.SendPropertyChanging();
			entity.Crossfit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeaturedContent")]
	public partial class FeaturedContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeaturedContentId;
		
		private int _PhotoId;
		
		private EntitySet<FeaturedContentData> _FeaturedContentDatas;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeaturedContentIdChanging(int value);
    partial void OnFeaturedContentIdChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    #endregion
		
		public FeaturedContent()
		{
			this._FeaturedContentDatas = new EntitySet<FeaturedContentData>(new Action<FeaturedContentData>(this.attach_FeaturedContentDatas), new Action<FeaturedContentData>(this.detach_FeaturedContentDatas));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeaturedContentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeaturedContentId
		{
			get
			{
				return this._FeaturedContentId;
			}
			set
			{
				if ((this._FeaturedContentId != value))
				{
					this.OnFeaturedContentIdChanging(value);
					this.SendPropertyChanging();
					this._FeaturedContentId = value;
					this.SendPropertyChanged("FeaturedContentId");
					this.OnFeaturedContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeaturedContent_FeaturedContentData", Storage="_FeaturedContentDatas", ThisKey="FeaturedContentId", OtherKey="FeatureContentId")]
		public EntitySet<FeaturedContentData> FeaturedContentDatas
		{
			get
			{
				return this._FeaturedContentDatas;
			}
			set
			{
				this._FeaturedContentDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_FeaturedContent", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.FeaturedContents.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.FeaturedContents.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeaturedContentDatas(FeaturedContentData entity)
		{
			this.SendPropertyChanging();
			entity.FeaturedContent = this;
		}
		
		private void detach_FeaturedContentDatas(FeaturedContentData entity)
		{
			this.SendPropertyChanging();
			entity.FeaturedContent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeaturedContentData")]
	public partial class FeaturedContentData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeaturedContentDataId;
		
		private int _FeatureContentId;
		
		private int _Position;
		
		private string _Text;
		
		private string _Link;
		
		private string _LinkText;
		
		private string _TItle;
		
		private EntityRef<FeaturedContent> _FeaturedContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeaturedContentDataIdChanging(int value);
    partial void OnFeaturedContentDataIdChanged();
    partial void OnFeatureContentIdChanging(int value);
    partial void OnFeatureContentIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnLinkTextChanging(string value);
    partial void OnLinkTextChanged();
    partial void OnTItleChanging(string value);
    partial void OnTItleChanged();
    #endregion
		
		public FeaturedContentData()
		{
			this._FeaturedContent = default(EntityRef<FeaturedContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeaturedContentDataId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeaturedContentDataId
		{
			get
			{
				return this._FeaturedContentDataId;
			}
			set
			{
				if ((this._FeaturedContentDataId != value))
				{
					this.OnFeaturedContentDataIdChanging(value);
					this.SendPropertyChanging();
					this._FeaturedContentDataId = value;
					this.SendPropertyChanged("FeaturedContentDataId");
					this.OnFeaturedContentDataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeatureContentId", DbType="Int NOT NULL")]
		public int FeatureContentId
		{
			get
			{
				return this._FeatureContentId;
			}
			set
			{
				if ((this._FeatureContentId != value))
				{
					if (this._FeaturedContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeatureContentIdChanging(value);
					this.SendPropertyChanging();
					this._FeatureContentId = value;
					this.SendPropertyChanged("FeatureContentId");
					this.OnFeatureContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NChar(1000)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkText", DbType="NChar(1000)")]
		public string LinkText
		{
			get
			{
				return this._LinkText;
			}
			set
			{
				if ((this._LinkText != value))
				{
					this.OnLinkTextChanging(value);
					this.SendPropertyChanging();
					this._LinkText = value;
					this.SendPropertyChanged("LinkText");
					this.OnLinkTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TItle", DbType="NChar(100)")]
		public string TItle
		{
			get
			{
				return this._TItle;
			}
			set
			{
				if ((this._TItle != value))
				{
					this.OnTItleChanging(value);
					this.SendPropertyChanging();
					this._TItle = value;
					this.SendPropertyChanged("TItle");
					this.OnTItleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeaturedContent_FeaturedContentData", Storage="_FeaturedContent", ThisKey="FeatureContentId", OtherKey="FeaturedContentId", IsForeignKey=true)]
		public FeaturedContent FeaturedContent
		{
			get
			{
				return this._FeaturedContent.Entity;
			}
			set
			{
				FeaturedContent previousValue = this._FeaturedContent.Entity;
				if (((previousValue != value) 
							|| (this._FeaturedContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeaturedContent.Entity = null;
						previousValue.FeaturedContentDatas.Remove(this);
					}
					this._FeaturedContent.Entity = value;
					if ((value != null))
					{
						value.FeaturedContentDatas.Add(this);
						this._FeatureContentId = value.FeaturedContentId;
					}
					else
					{
						this._FeatureContentId = default(int);
					}
					this.SendPropertyChanged("FeaturedContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fighter")]
	public partial class Fighter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FighterId;
		
		private int _AccountId;
		
		private string _Name;
		
		private int _PhotoId;
		
		private string _Bio;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFighterIdChanging(int value);
    partial void OnFighterIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnBioChanging(string value);
    partial void OnBioChanged();
    #endregion
		
		public Fighter()
		{
			this._Account = default(EntityRef<Account>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FighterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FighterId
		{
			get
			{
				return this._FighterId;
			}
			set
			{
				if ((this._FighterId != value))
				{
					this.OnFighterIdChanging(value);
					this.SendPropertyChanging();
					this._FighterId = value;
					this.SendPropertyChanged("FighterId");
					this.OnFighterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(60) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bio", DbType="NChar(2000) NOT NULL", CanBeNull=false)]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Fighter", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Fighters.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Fighters.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Fighter", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Fighters.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Fighters.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoId;
		
		private string _Title;
		
		private string _Location;
		
		private int _AccountId;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<Coach> _Coaches;
		
		private EntitySet<Crossfit> _Crossfits;
		
		private EntitySet<FeaturedContent> _FeaturedContents;
		
		private EntitySet<Fighter> _Fighters;
		
		private EntitySet<Trainer> _Trainers;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Photo()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._Coaches = new EntitySet<Coach>(new Action<Coach>(this.attach_Coaches), new Action<Coach>(this.detach_Coaches));
			this._Crossfits = new EntitySet<Crossfit>(new Action<Crossfit>(this.attach_Crossfits), new Action<Crossfit>(this.detach_Crossfits));
			this._FeaturedContents = new EntitySet<FeaturedContent>(new Action<FeaturedContent>(this.attach_FeaturedContents), new Action<FeaturedContent>(this.detach_FeaturedContents));
			this._Fighters = new EntitySet<Fighter>(new Action<Fighter>(this.attach_Fighters), new Action<Fighter>(this.detach_Fighters));
			this._Trainers = new EntitySet<Trainer>(new Action<Trainer>(this.attach_Trainers), new Action<Trainer>(this.detach_Trainers));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NChar(2000) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Class", Storage="_Classes", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Coach", Storage="_Coaches", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Coach> Coaches
		{
			get
			{
				return this._Coaches;
			}
			set
			{
				this._Coaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Crossfit", Storage="_Crossfits", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Crossfit> Crossfits
		{
			get
			{
				return this._Crossfits;
			}
			set
			{
				this._Crossfits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_FeaturedContent", Storage="_FeaturedContents", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<FeaturedContent> FeaturedContents
		{
			get
			{
				return this._FeaturedContents;
			}
			set
			{
				this._FeaturedContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Fighter", Storage="_Fighters", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Fighter> Fighters
		{
			get
			{
				return this._Fighters;
			}
			set
			{
				this._Fighters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Trainer", Storage="_Trainers", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Trainer> Trainers
		{
			get
			{
				return this._Trainers;
			}
			set
			{
				this._Trainers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Photo", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Coaches(Coach entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Coaches(Coach entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Crossfits(Crossfit entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Crossfits(Crossfit entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_FeaturedContents(FeaturedContent entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_FeaturedContents(FeaturedContent entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Fighters(Fighter entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Fighters(Fighter entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trainer")]
	public partial class Trainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainerId;
		
		private int _AccountId;
		
		private int _PhotoId;
		
		private string _Background;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainerIdChanging(int value);
    partial void OnTrainerIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnBackgroundChanging(string value);
    partial void OnBackgroundChanged();
    #endregion
		
		public Trainer()
		{
			this._Account = default(EntityRef<Account>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainerId
		{
			get
			{
				return this._TrainerId;
			}
			set
			{
				if ((this._TrainerId != value))
				{
					this.OnTrainerIdChanging(value);
					this.SendPropertyChanging();
					this._TrainerId = value;
					this.SendPropertyChanged("TrainerId");
					this.OnTrainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", DbType="Int NOT NULL")]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Background", DbType="NChar(2000) NOT NULL", CanBeNull=false)]
		public string Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Trainer", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Trainers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Trainers.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Trainer", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Trainers.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Trainers.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
